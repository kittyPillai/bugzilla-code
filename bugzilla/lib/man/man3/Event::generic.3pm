.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Event::generic 3"
.TH Event::generic 3 "2007-05-22" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Event::generic \- generic event handling
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Event::generic;
\&
\& $source = Event::generic::Source\->new;
\&
\& $w = Event\->generic(source => $source, ...);
\& $w = $source\->watch(...);
\&
\& $source = $w\->source;
\& $w\->source($source);
\&
\& $source\->event;
\& $source\->event($data);
\&
\& $data = $event\->data;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a watcher type within the \f(CW\*(C`Event\*(C'\fR framework.
You must understand the architecture of the \f(CW\*(C`Event\*(C'\fR system in order to
understand this document.
.PP
This module provides a system of reified event sources and watchers
watching those sources.  Events are generated solely by a method on the
event source object.  The events may carry arbitrary data to the event
handler callbacks.  This module is intended for situations where the
events of interest are best determined by Perl code.
.SH "CLASSES"
.IX Header "CLASSES"
.IP "Event::generic::Source" 4
.IX Item "Event::generic::Source"
A reified event source.
.IP "Event::generic" 4
.IX Item "Event::generic"
A watcher that can watch \f(CW\*(C`Event::generic::Source\*(C'\fR event sources.
.IP "Event::Event::Dataful" 4
.IX Item "Event::Event::Dataful"
A (target) event that can carry arbitrary data.
.SH "EVENT SOURCE CLASS"
.IX Header "EVENT SOURCE CLASS"
.SS "Constructor"
.IX Subsection "Constructor"
.IP "Event::generic::Source\->new" 4
.IX Item "Event::generic::Source->new"
Creates and returns a new event source.
.SS "Methods"
.IX Subsection "Methods"
.ie n .IP "$source\->event" 4
.el .IP "\f(CW$source\fR\->event" 4
.IX Item "$source->event"
.PD 0
.ie n .IP "$source\->event(\s-1DATA\s0)" 4
.el .IP "\f(CW$source\fR\->event(\s-1DATA\s0)" 4
.IX Item "$source->event(DATA)"
.PD
The invocation of this method is a source event for watchers of the
event source.  When this method is called, each active watcher of the
event source generates a target event.  The \fI\s-1DATA\s0\fR, if supplied, is
copied into the target event objects, from which it can be retrieved
using the \f(CW\*(C`data()\*(C'\fR method.
.ie n .IP "$source\->watch(\s-1ATTR\s0 => \s-1VALUE, ...\s0)" 4
.el .IP "\f(CW$source\fR\->watch(\s-1ATTR\s0 => \s-1VALUE, ...\s0)" 4
.IX Item "$source->watch(ATTR => VALUE, ...)"
Generates and returns a new watcher, configured to watch this event
source.  The standard watcher attributes may be specified as arguments.
The watcher returned is an ordinary \f(CW\*(C`Event::generic\*(C'\fR, and may be
reconfigured to watch a different event source.
.SH "WATCHER CLASS"
.IX Header "WATCHER CLASS"
.SS "Type-specific attributes"
.IX Subsection "Type-specific attributes"
.ie n .IP "source => $source" 4
.el .IP "source => \f(CW$source\fR" 4
.IX Item "source => $source"
The event source to watch.  This must be either an
\&\f(CW\*(C`Event::generic::Source\*(C'\fR object or \f(CW\*(C`undef\*(C'\fR.  When set to \f(CW\*(C`undef\*(C'\fR,
no source is being watched, and the watcher cannot be started.
.SH "EVENT CLASS"
.IX Header "EVENT CLASS"
.SS "Type-specific methods"
.IX Subsection "Type-specific methods"
.ie n .IP "$event\->data" 4
.el .IP "\f(CW$event\fR\->data" 4
.IX Item "$event->data"
Returns the data associated with the event, which may be any scalar.
This is read-only, and is set by the event source.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Event
