.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Email::Reply 3"
.TH Email::Reply 3 "2013-08-17" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Email::Reply \- reply to an email message
.SH "VERSION"
.IX Header "VERSION"
version 1.203
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Email::Reply;
\&
\&  my $message = Email::Simple\->new(join \*(Aq\*(Aq, <>);
\&  my $from    = (Email::Address\->parse($message\->header(\*(AqFrom\*(Aq))[0];
\&  
\&  my $reply   = reply to   => $message,
\&                      from => \*(Aq"Casey West" <casey@geeknest.com>\*(Aq,
\&                      all  => 1,
\&                      body => <<_\|_RESPONSE_\|_;
\&  Thanks for the message, I\*(Aqll be glad to explain...
\&  _\|_RESPONSE_\|_
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This software takes the hard out of generating replies to email messages.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "reply"
.IX Subsection "reply"
.Vb 10
\&  my $reply   = reply to       => $message,
\&                      from     => \*(Aq"Casey West" <casey@geeknest.com>\*(Aq,
\&                      all      => 1;
\&                      self     => 0,
\&                      attach   => 1,
\&                      quote    => 1,
\&                      top_post => 0,
\&                      keep_sig => 1,
\&                      prefix   => \*(Aq: \*(Aq,
\&                      attrib   => sprintf("From %s, typer of many words:",
\&                                          $from\->name),
\&                      body     => <<_\|_RESPONSE_\|_;
\&  Thanks for the message, I\*(Aqll be glad to explain the picture...
\&  _\|_RESPONSE_\|_
.Ve
.PP
This function accepts a number of named parameters and returns an email
message object of type \f(CW\*(C`Email::MIME\*(C'\fR or \f(CW\*(C`Email::Simple\*(C'\fR, depending
on the parameters passed. Lets review those parameters now.
.ie n .IP """to""" 4
.el .IP "\f(CWto\fR" 4
.IX Item "to"
This required parameter is the email message you're replying to. It can
represent a number of object types, or a string containing the message.  This
value is passed directly to \f(CW\*(C`Email::Abstract\*(C'\fR without passing go or collecting
\&\f(CW$200\fR so please, read up on its available plugins for what is allowed here.
.ie n .IP """from""" 4
.el .IP "\f(CWfrom\fR" 4
.IX Item "from"
This optional parameter specifies an email address to use indicating the sender
of the reply message. It can be a string or an \f(CW\*(C`Email::Address\*(C'\fR object. In the
absence of this parameter, the first address found in the original message's
\&\f(CW\*(C`To\*(C'\fR header is used. This may not always be what you want, so this parameter
comes highly recommended.
.ie n .IP """all""" 4
.el .IP "\f(CWall\fR" 4
.IX Item "all"
This optional parameter indicates weather or not you'd like to \*(L"Reply to All.\*(R"
If true, the reply's \f(CW\*(C`Cc\*(C'\fR header will be populated with all the addresses in
the original's \f(CW\*(C`To\*(C'\fR and \f(CW\*(C`Cc\*(C'\fR headers. By default, the parameter is false,
indicating \*(L"Reply to Sender.\*(R"
.ie n .IP """self""" 4
.el .IP "\f(CWself\fR" 4
.IX Item "self"
This optional parameter decides weather or not an address matching the \f(CW\*(C`from\*(C'\fR
address will be included in the list of \f(CW\*(C`all\*(C'\fR addresses. If true, your address
will be preserved in that list if it is found. If false, as it is by default,
your address will be removed from the list. As you might expect, this parameter
is only useful if \f(CW\*(C`all\*(C'\fR is true.
.ie n .IP """attach""" 4
.el .IP "\f(CWattach\fR" 4
.IX Item "attach"
This optional parameter allows for the original message, in
its entirety, to be encapsulated in a \s-1MIME\s0 part of type \f(CW\*(C`message/rfc822\*(C'\fR.
If true, the returned object from \f(CW\*(C`reply\*(C'\fR will be a \f(CW\*(C`Email::MIME\*(C'\fR object
whose second part is the encapsulated message. If false, none of this happens.
By default, none of this happens.
.ie n .IP """quote""" 4
.el .IP "\f(CWquote\fR" 4
.IX Item "quote"
This optional parameter, which is true by default, will quote
the original message for your reply. If the original message is a \s-1MIME\s0
message, the first \f(CW\*(C`text/plain\*(C'\fR type part will be quoted. If it's a Simple
message, the body will be quoted. Well, that's only if you keep the
parameter true. If you don't, none of this occurs.
.ie n .IP """top_post""" 4
.el .IP "\f(CWtop_post\fR" 4
.IX Item "top_post"
This optional parameter, whose use is generally discouraged, will allow top
posting when true. It will implicitly set \f(CW\*(C`quote\*(C'\fR to true, and put your
\&\f(CW\*(C`body\*(C'\fR before the quoted text. It is false by default, and you should do your
best to keep it that way.
.ie n .IP """keep_sig""" 4
.el .IP "\f(CWkeep_sig\fR" 4
.IX Item "keep_sig"
This optional parameter toggles the signature stripping mechanism. True by
default, the original quoted body will have its signature removed. When false,
the signature is left in-tact and will be quoted accordingly. This is only
useful when \f(CW\*(C`quote\*(C'\fR is true.
.ie n .IP """prefix""" 4
.el .IP "\f(CWprefix\fR" 4
.IX Item "prefix"
This optional parameter specifies the quoting prefix. By default, it's
\&\f(CW\*(C`>\*(C'\fR, but you can change it by setting this parameter. Again, only useful
when \f(CW\*(C`quote\*(C'\fR is true.
.ie n .IP """attrib""" 4
.el .IP "\f(CWattrib\fR" 4
.IX Item "attrib"
This optional parameter specifies the attribution line to add to the beginning
of quoted text. By default, the name or email address of the original sender is
used to replace \f(CW%s\fR in the string, \f(CW"%s wrote:"\fR.  You may change that with
this parameter. No special formats, \f(CW\*(C`sprintf()\*(C'\fR or otherwise, are provided for
your convenience. Sorry, you'll have to make due.  Like \f(CW\*(C`prefix\*(C'\fR and
\&\f(CW\*(C`keep_sig\*(C'\fR, this is only good when \f(CW\*(C`quote\*(C'\fR is true.
.ie n .IP """body""" 4
.el .IP "\f(CWbody\fR" 4
.IX Item "body"
This requried parameter contains your prose, your manifesto, your reply.
Remember to spell check!
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Email::Abstract,
Email::MIME,
Email::MIME::Creator,
Email::Simple::Creator,
Email::Address,
perl.
.SH "AUTHOR"
.IX Header "AUTHOR"
Casey West <casey@geeknest.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Casey West.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
