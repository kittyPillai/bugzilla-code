.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Event::MakeMaker 3"
.TH Event::MakeMaker 3 "2007-05-22" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Event::MakeMaker \- MakeMaker glue for the C\-level Event API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This is an advanced feature of Event.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For optimal performance, hook into Event at the C\-level.  You'll need
to make changes to your \f(CW\*(C`Makefile.PL\*(C'\fR and add code to your \f(CW\*(C`xs\*(C'\fR /
\&\f(CW\*(C`c\*(C'\fR file(s).
.SH "WARNING"
.IX Header "WARNING"
When you hook in at the C\-level you get a \fIhuge\fR performance gain,
but you also reduce the chances that your code will work unmodified
with newer versions of \f(CW\*(C`perl\*(C'\fR or \f(CW\*(C`Event\*(C'\fR.  This may or may not be a
problem.  Just be aware, and set your expectations accordingly.
.SH "HOW TO"
.IX Header "HOW TO"
.SS "Makefile.PL"
.IX Subsection "Makefile.PL"
.Vb 1
\&  use Event::MakeMaker qw(event_args);
\&
\&  # ... set up %args ...
\&
\&  WriteMakefile(event_args(%args));
.Ve
.SS "\s-1XS\s0"
.IX Subsection "XS"
.Vb 1
\&  #include "EventAPI.h"
\&
\&  BOOT:
\&    I_EVENT_API("YourModule");
.Ve
.SS "\s-1API \s0(v21)"
.IX Subsection "API (v21)"
.Vb 2
\& struct EventAPI {
\&    I32 Ver;
\&
\&    /* EVENTS */
\&    void (*queue   )(pe_event *ev);
\&    void (*start   )(pe_watcher *ev, int repeat);
\&    void (*now     )(pe_watcher *ev);
\&    void (*stop    )(pe_watcher *ev, int cancel_events);
\&    void (*cancel  )(pe_watcher *ev);
\&    void (*suspend )(pe_watcher *ev);
\&    void (*resume  )(pe_watcher *ev);
\&
\&    /* All constructors optionally take a stash and template.  Either
\&      or both can be NULL.  The template should not be a reference. */
\&    pe_idle     *(*new_idle  )(HV*, SV*);
\&    pe_timer    *(*new_timer )(HV*, SV*);
\&    pe_io       *(*new_io    )(HV*, SV*);
\&    pe_var      *(*new_var   )(HV*, SV*);
\&    pe_signal   *(*new_signal)(HV*, SV*);
\&
\&    /* TIMEABLE */
\&    void (*tstart)(pe_timeable *);
\&    void (*tstop)(pe_timeable *);
\&
\&    /* HOOKS */
\&    pe_qcallback *(*add_hook)(char *which, void *cb, void *ext_data);
\&    void (*cancel_hook)(pe_qcallback *qcb);
\&
\&    /* STATS */
\&    void (*install_stats)(pe_event_stats_vtbl *esvtbl);
\&    void (*collect_stats)(int yes);
\&    pe_ring *AllWatchers;
\&
\&    /* TYPEMAP */
\&    SV   *(*watcher_2sv)(pe_watcher *wa);
\&    void *(*sv_2watcher)(SV *sv);
\&    SV   *(*event_2sv)(pe_event *ev);
\&    void *(*sv_2event)(SV *sv);
\& };
.Ve
.SS "\s-1EXAMPLE\s0"
.IX Subsection "EXAMPLE"
.Vb 1
\&  static pe_io *X11_ev=0;
\&
\&  static void x_server_dispatch(void *ext_data)
\&  { ... }
\&
\&  if (!X11_ev) {
\&    X11_ev = GEventAPI\->new_io(0,0);
\&    X11_ev\->poll = PE_R;
\&    sv_setpv(X11_ev\->base.desc, "X::Server");
\&    X11_ev\->base.callback = (void*) x_server_dispatch;
\&    X11_ev\->base.ext_data = <whatever>;
\&    X11_ev\->base.prio = PE_PRIO_NORMAL;
\&  }
\&  X11_ev\->fd = x_fd;
\&  GEventAPI\->resume((pe_event*) X11_ev);
\&  GEventAPI\->start((pe_event*) X11_ev, 0);
.Ve
.SS "\s-1BUT I NEED A NEW TYPE OF WATCHER FOR MY INTERGALACTIC INFEROMETER\s0"
.IX Subsection "BUT I NEED A NEW TYPE OF WATCHER FOR MY INTERGALACTIC INFEROMETER"
I'd prefer not to export the entire Event.h apparatus in favor of
minimizing interdependencies.  If you really, really need to create a
new type of watcher send your problem analysis to the mailing list!
